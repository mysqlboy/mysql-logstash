##
#	Author: Andrew Moore
#	Email: eroomydna@gmail.com
#	github: mysqlboy
#
#	This config file is work in progress and is designed to consume events from the Percona Server
#	audit logging plugin using the JSON format. The filter block breaks out some extra detail to 
#	permit better analysis on the data using Elasticsearch and Kibana.
##

input {
        file {
	# Path for the audit log file
                path => '/var/log/mysql/audit.log'
	# Identify the events for further filtering
                type => 'percona-audit'
	# The input from the audit plugin is JSON so using the codec permits splitting the keys from the document
                codec => json
        }
}

filter {
        date {
	# 
                target => "@timestamp"
                match => [ "[audit_record][timestamp]", "YYY-MM-dd HH:mm:ss Z", "ISO8601" ]
                add_field => { "[audit_record][timestamp]" => "blah" }
        }
	
        if [audit_record][command_class] == "select" {
                grok {
                        match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} %{GREEDYDATA:[audit_record][columns]} (from|FROM) %{WORD:[audit_record][table]}" ]
                }
        }

        if [audit_record][command_class] == "update" {
                grok {
                        match => [ "[audit_record][sqltext]", "%{WORD:[audit_record][qtype]} %{WORD:[audit_record][table]}" ]
                }
        }

        if [audit_record][command_class] == "insert" {
                grok {
                        match => [ "[audit_record][sqltext]", "%{WORD:qtype} %{WORD:table}" ]
                }
        }

       if [audit_record][command_class] == "delete" {
                grok {
                        match => [ "[audit_record][sqltext]", "%{WORD:qtype} (from|FROM) %{WORD:table}" ]
                }
        }

       if [audit_record][command_class] == "alter_table" {
                grok {
                        match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:object} %{DATA:[audit_record][table]} %{DATA:[audit_record][verb]} %{DATA:[audit_record][struct]} %{GREEDYDATA})" ]
                        remove_field => "object"
                }
        }

        if [audit_record][command_class] == "set_option" {
                grok {
                        match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:[audit_record][scope]} %{WORD:[audit_record][variable]}(=| = )%{GREEDYDATA:[audit_record][value]})" ]
                        remove_field => "[audit_record][qtype]"
                }
        }

        if [audit_record][command_class] == "grant" {
                grok {
                        match => [ "[audit_record][sqltext]", "(%{WORD:[audit_record][qtype]} %{WORD:[audit_record][scope]} %{WORD:[audit_record][variable]}(=| = )%{GREEDYDATA:[audit_record][value]})" ]
                        remove_field => "[audit_record][qtype]"
                }
        }
}

output {
        redis {
                host => '192.168.88.239'
                data_type => 'list'
                key => 'logstash'
        }
        stdout { codec => "rubydebug" }

