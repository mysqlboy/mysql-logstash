input {
#	file {
#		path => '/data/audit/audit.log'
#		type => 'mysql_audit'
#	}
#	file {
#		path => '/var/log/mysql-error.log'
#		type => 'mysql_err'
#	}
#	file {
#		path => '/var/lib/mysql/mysql-slow.log'
#		type => 'mysql_slow'
#		codec => multiline {
#			pattern => "^# User@Host:"
#			negate => true
#			what => previous
#		}
#	}
	stdin{ type => 'mysql_slow' }
}

filter {
	if [type] == "mysql_slow" {
		grok {
			match => [ "message", "^# User@Host: %{USER:user}(?:\[[^\]]+\])?\s+@\s+%{HOST:mysql_host}?\s+\[%{IP:ip}?\]" ]
		}
#  Query_time: 0.007339  Lock_time: 0.000199  Rows_sent: 579  Rows_examined: 579  Rows_affected: 0
		grok { 
			match => [ "message", "^# Query_time: %{NUMBER:duration:float}\s+Lock_time: %{NUMBER:lock_time:float}\s+Rows_sent: %{NUMBER:rows_sent:int}\s+Rows_examined: %{NUMBER:rows_examined:int}\s+ Rows_affected: %{NUMBER:rows_affected:int}"]		
#		\s+Lock_time: %{NUMBER:lock_wait:float} Rows_sent: %{NUMBER:results:int} \s*Rows_examined: %{NUMBER:scanned:int}
		}
		grok {
			match => [ "message", "^SET timestamp=%{NUMBER:timestamp};" ]
		}
		grok {
			match => [ "message", "(!^# && !^SET) %{GREEDYDATA:sql_text}" ]
		}
		date {
			match => [ "timestamp", "UNIX" ]
		}
		mutate {
			remove_field => "timestamp"
		}
	}
}

output {
	redis {
		host => 'julian.mysqlboy.com'
		key => 'logstash'
		data_type => 'list'
		type => 'percona_server'
	}
        stdout {
                codec=> rubydebug
        }
}


